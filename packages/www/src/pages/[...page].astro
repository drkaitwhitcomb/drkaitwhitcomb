---
import ApplicationLayout from "@/layouts/ApplicationLayout.astro";
import pagesRaw from "@/configs/pages";
import { usePage } from "@/hooks/usePage";

type ReservedKeys = "$resource" | "$version";

const entries = Object.entries(pagesRaw).filter(
  ([key]) => !(["$resource", "$version"] as ReservedKeys[]).includes(key as ReservedKeys)
);

function normalizeSlug(value: any, key: string) {
  let slug = (value?.metadata?.slug ?? value?.metaData?.slug ?? key) as unknown;
  // Support slug as string or string[]
  if (Array.isArray(slug)) {
    slug = slug.join("/");
  }
  if (slug == null) slug = "";
  const s = String(slug).trim();
  if (s === "/" || s === "") return "/";
  // Trim leading/trailing slashes
  return s.replace(/^\/+/g, "").replace(/\/+$/g, "");
}

// In Astro, a catch-all param like `[...page]` is provided as a single string (e.g. "a/b"), not an array
const slugParam =
  typeof Astro.params.page === "string" && Astro.params.page !== ""
    ? Astro.params.page
    : undefined;

let pageKey = "home";
if (slugParam && slugParam !== "") {
  const match = entries.find(([key, value]) => {
    const slug = normalizeSlug(value, key);
    return slug === slugParam || key === slugParam;
  });
  if (match) {
    pageKey = match[0];
  } else {
    Astro.response.status = 404;
    pageKey = "home";
  }
}

const page = usePage(pageKey);
const title =
  page?.metadata?.title ?? page?.metaData?.pageTitle ?? pageKey;
const description =
  page?.metadata?.description ?? page?.metaData?.description ?? undefined;
const masonry = page?.data?.masonry;
---

<ApplicationLayout title={title} description={description} masonry={masonry} />