---
import type { GetStaticPaths } from "astro";
import ApplicationLayout from "@/layouts/ApplicationLayout.astro";
import pagesRaw from "@/configs/pages";
import { usePage } from "@/hooks/usePage";
import { getCollection, getEntry } from "astro:content";

// Gather page entries from configs/pages.json
const RESERVED = new Set(["$resource", "$version"]);
const entries = Object.entries(pagesRaw).filter(([k]) => !RESERVED.has(k as any));

function normalizeSlug(value: any, key: string) {
  const slug = value?.metadata?.slug ?? value?.metaData?.slug ?? key;
  if (slug === "/" || slug === "") return "/";
  return String(slug).replace(/^\//, "");
}

export const getStaticPaths: GetStaticPaths = async () => {
  const pagePaths = entries
    .map(([key, value]) => {
      const slug = normalizeSlug(value, key);
      if (slug === "/") return null; // index handled by src/pages/index.astro
      return { params: { page: slug } };
    })
    .filter(Boolean) as { params: { page: string } }[];

  const posts = await getCollection("posts");
  const postPaths = posts.map((post) => ({ params: { page: `posts/${post.slug}` } }));

  return [...pagePaths, ...postPaths];
};

const param = (Astro.params.page || "") as string;

let layoutTitle: string = "";
let masonry: any | undefined;
let isPost = false;
let PostContent: any | null = null;

if (param.startsWith("posts/")) {
  const slug = param.replace(/^posts\//, "");
  const post = await getEntry("posts", slug);
  if (!post) throw new Error(`No post found for slug: ${slug}`);
  const rendered = await post.render();
  PostContent = rendered.Content;
  layoutTitle = post.data.title ?? slug;
  isPost = true;
} else {
  const match = entries.find(([key, value]) => {
    const slug = normalizeSlug(value, key);
    return slug === param || key === param;
  });
  if (!match) throw new Error(`Page not found for param: ${param}`);
  const [pageKey] = match as [keyof typeof pagesRaw, any];
  const page = usePage(pageKey as any);
  layoutTitle = page?.metadata?.title ?? page?.metaData?.pageTitle ?? String(pageKey);
  masonry = page?.data?.masonry;
}
---

{!isPost && <ApplicationLayout title={layoutTitle} masonry={masonry} />}
{isPost && (
  <ApplicationLayout title={layoutTitle}>
    <div slot="main" class="prose mx-auto px-4 py-8">
      {PostContent && <PostContent />}
    </div>
  </ApplicationLayout>
)}
